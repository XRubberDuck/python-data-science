
.. _series-dataframe:

Series 与 DataFrame
===================


pandas 的核心数据结构有两个： Series 和 DataFrame。


Series
~~~~~~

在 pandas 中，\ ``Series`` 是一种一维的带标签的 **数组状** 数据结构。

我们首先以 4 个数创建一个 ``Series``\ ，并命名为 ``my_series``\ 。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    s = pd.Series([1, 2, 3, 4], name = 'my_series')

``Series`` 是一个数组状数据结构，数组最重要的结构是索引（index）。index
主要用于标记第几个位置存储什么数据。\ ``pd.Series()`` 中不指定 index
参数时，默认从 0 开始，逐一自增，形如： 0，1，…

-  Series 支持计算操作。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    s * 100




.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    0    100
    1    200
    2    300
    3    400
    Name: my_series, dtype: int64



-  Series 支持描述性统计。比如，获得所有统计信息。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    s.describe()




.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    count    4.000000
    mean     2.500000
    std      1.290994
    min      1.000000
    25%      1.750000
    50%      2.500000
    75%      3.250000
    max      4.000000
    Name: my_series, dtype: float64



计算平均值，中位数和标准差。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    s.mean()




.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    2.5



.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    s.median()




.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    2.5



.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    s.std()




.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    1.2909944487358056



-  Series 的索引很灵活。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    s.index = ['number1','number2','number3','number4']

这时，\ ``Series`` 就像一个 Python 中的字典 ``dict``\ ，可以使用像
``dict`` 一样的语法来访问 ``Series`` 中的元素，其中 ``index`` 相当于
``dict`` 的键 ``key``\ 。例如，使用 ``[]`` 操作符访问 ``number1``
对应的值。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    s['number1']




.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    1



又例如，使用 ``in`` 表达式判断某个索引是否在 Series 中。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    'number1' in s




.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    True



DataFrame
~~~~~~~~~

``DataFrame`` 可以简单理解为一个 Excel 表，有很多列和很多行。
``DataFrame`` 的列（column）表示一个字段；\ ``DataFrame``
的行（row）表示一条数据。\ ``DataFrame`` 常被用来分析像 Excel
这样的、有行和列的表格类数据。Excel 也正在兼容
``DataFrame``\ ，使得用户在 Excel 中进行 pandas 数据处理与分析。

创建 DataFrame
~~~~~~~~~~~~~~

创建一个 ``DataFrame``
有很多方式，比如从列表、字典、文件中读取数据，并创建一个
``DataFrame``\ 。

-  基于列表创建

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    names = ['Alice', 'Bob', 'Charlie']
    ages = [25, 30, 22]
    cities = ['New York', 'San Francisco', 'Los Angeles']
    data = {'Name': names, 'Age': ages, 'City': cities}
    df = pd.DataFrame(data)

-  基于字典创建

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    data = {'Column1': [1, 2], 'Column2': [3, 4]}
    df = pd.DataFrame(data)

-  基于文件创建

对于不同类型的文件，使用不同的函数，比如 ``read_csv`` 读取 csv
类型的数据。\ ``df = pd.read_csv('/path/to/csv')`` 用来读取一个 csv
文件，\ ``df =  pd.read_excel('/path/to/excel')`` 用来读取一个 Excel
文件。

   注：csv 文件一般由很多个 column 组成，使用 ``pd.read_csv``
   时，默认每个 column
   之间的分隔符为逗号（\ ``,``\ ），\ ``pd.read_table``
   默认分隔符为换行符。这些函数还支持许多其他参数，可以使用 ``help()``
   函数查看。 例：help(pd.read_csv)

案例：PWT
~~~~~~~~~

`PWT <https://www.rug.nl/ggdc/productivity/pwt/>`__
是一个经济学数据库，用于比较国家和地区之间的宏观经济数据，该数据集包含了各种宏观经济指标，如国内生产总值（GDP）、人均收入、劳动力和资本等因素，以及价格水平、汇率等信息。我们先下载，并使用
pandas 简单探索该数据集。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    import os
    import urllib.request
    import zipfile
    
    folder_path = os.path.join(os.getcwd(), "./data/pwt")
    download_url = "https://www.rug.nl/ggdc/docs/pwt70_06032011version.zip"
    file_name = download_url.split("/")[-1]
    if not os.path.exists(folder_path):
        # 创建文件夹
        os.makedirs(folder_path)
        print(f"文件夹不存在，已创建。")
    
        zip_file_path = os.path.join(folder_path, file_name)
    
        urllib.request.urlretrieve(download_url, zip_file_path)
        with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
            zip_ref.extractall(folder_path)
        print("数据已下载并解压缩。")
    else:
        print(f"文件夹已存在，无需操作。")


.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    文件夹已存在，无需操作。


查看数据
~~~~~~~~

-  使用 ``read_csv()`` 读取数据。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    import pandas as pd
    
    df = pd.read_csv(os.path.join(folder_path, "pwt70_w_country_names.csv"))

-  ``head()`` 函数可以指定查看前 n 行。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    n = 5
    df.head(n)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>country</th>
          <th>isocode</th>
          <th>year</th>
          <th>POP</th>
          <th>XRAT</th>
          <th>Currency_Unit</th>
          <th>ppp</th>
          <th>tcgdp</th>
          <th>cgdp</th>
          <th>cgdp2</th>
          <th>...</th>
          <th>kg</th>
          <th>ki</th>
          <th>openk</th>
          <th>rgdpeqa</th>
          <th>rgdpwok</th>
          <th>rgdpl2wok</th>
          <th>rgdpl2pe</th>
          <th>rgdpl2te</th>
          <th>rgdpl2th</th>
          <th>rgdptt</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>Afghanistan</td>
          <td>AFG</td>
          <td>1950</td>
          <td>8150.368</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>...</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>1</th>
          <td>Afghanistan</td>
          <td>AFG</td>
          <td>1951</td>
          <td>8284.473</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>...</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>2</th>
          <td>Afghanistan</td>
          <td>AFG</td>
          <td>1952</td>
          <td>8425.333</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>...</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>3</th>
          <td>Afghanistan</td>
          <td>AFG</td>
          <td>1953</td>
          <td>8573.217</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>...</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>4</th>
          <td>Afghanistan</td>
          <td>AFG</td>
          <td>1954</td>
          <td>8728.408</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>...</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
      </tbody>
    </table>
    <p>5 rows × 37 columns</p>
    </div>



-  ``tail()`` 函数指定查看后 n 行。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    df.tail(n)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>country</th>
          <th>isocode</th>
          <th>year</th>
          <th>POP</th>
          <th>XRAT</th>
          <th>Currency_Unit</th>
          <th>ppp</th>
          <th>tcgdp</th>
          <th>cgdp</th>
          <th>cgdp2</th>
          <th>...</th>
          <th>kg</th>
          <th>ki</th>
          <th>openk</th>
          <th>rgdpeqa</th>
          <th>rgdpwok</th>
          <th>rgdpl2wok</th>
          <th>rgdpl2pe</th>
          <th>rgdpl2te</th>
          <th>rgdpl2th</th>
          <th>rgdptt</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>11395</th>
          <td>Zimbabwe</td>
          <td>ZWE</td>
          <td>2005</td>
          <td>11639.470</td>
          <td>2.236364e+01</td>
          <td>Zimbabwe Dollar</td>
          <td>39.482829</td>
          <td>1968.205961</td>
          <td>169.097559</td>
          <td>184.183929</td>
          <td>...</td>
          <td>6.995770</td>
          <td>9.376272</td>
          <td>89.399427</td>
          <td>214.739197</td>
          <td>418.970867</td>
          <td>418.970867</td>
          <td>NaN</td>
          <td>390.907086</td>
          <td>NaN</td>
          <td>169.097559</td>
        </tr>
        <tr>
          <th>11396</th>
          <td>Zimbabwe</td>
          <td>ZWE</td>
          <td>2006</td>
          <td>11544.326</td>
          <td>1.643606e+02</td>
          <td>Zimbabwe Dollar</td>
          <td>384.899651</td>
          <td>2132.305773</td>
          <td>184.705956</td>
          <td>192.953943</td>
          <td>...</td>
          <td>7.648020</td>
          <td>14.986823</td>
          <td>81.697014</td>
          <td>217.543648</td>
          <td>424.754259</td>
          <td>407.262097</td>
          <td>NaN</td>
          <td>377.352394</td>
          <td>NaN</td>
          <td>179.368685</td>
        </tr>
        <tr>
          <th>11397</th>
          <td>Zimbabwe</td>
          <td>ZWE</td>
          <td>2007</td>
          <td>11443.187</td>
          <td>9.675781e+03</td>
          <td>Zimbabwe Dollar</td>
          <td>38583.323960</td>
          <td>2107.937100</td>
          <td>184.208918</td>
          <td>198.215361</td>
          <td>...</td>
          <td>8.387106</td>
          <td>15.787322</td>
          <td>84.483374</td>
          <td>202.707080</td>
          <td>396.486201</td>
          <td>376.163064</td>
          <td>NaN</td>
          <td>345.764991</td>
          <td>NaN</td>
          <td>173.113448</td>
        </tr>
        <tr>
          <th>11398</th>
          <td>Zimbabwe</td>
          <td>ZWE</td>
          <td>2008</td>
          <td>11350.000</td>
          <td>6.715424e+09</td>
          <td>Zimbabwe Dollar</td>
          <td>38723.957740</td>
          <td>1772.209867</td>
          <td>156.141839</td>
          <td>162.112294</td>
          <td>...</td>
          <td>7.685312</td>
          <td>13.444449</td>
          <td>85.117130</td>
          <td>174.178806</td>
          <td>343.159758</td>
          <td>332.649861</td>
          <td>NaN</td>
          <td>302.945712</td>
          <td>NaN</td>
          <td>142.329054</td>
        </tr>
        <tr>
          <th>11399</th>
          <td>Zimbabwe</td>
          <td>ZWE</td>
          <td>2009</td>
          <td>11383.000</td>
          <td>1.400000e+17</td>
          <td>Zimbabwe Dollar</td>
          <td>40289.958990</td>
          <td>1906.049843</td>
          <td>167.447056</td>
          <td>174.419700</td>
          <td>...</td>
          <td>7.905525</td>
          <td>14.743667</td>
          <td>83.749534</td>
          <td>182.613004</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>314.171069</td>
          <td>NaN</td>
          <td>151.435285</td>
        </tr>
      </tbody>
    </table>
    <p>5 rows × 37 columns</p>
    </div>



-  ``info()`` 函数可以查看数据基本信息，包括字段类型和非空值计数。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    df.info()


.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    <class 'pandas.core.frame.DataFrame'>
    RangeIndex: 11400 entries, 0 to 11399
    Data columns (total 37 columns):
     #   Column         Non-Null Count  Dtype  
    ---  ------         --------------  -----  
     0   country        11400 non-null  object 
     1   isocode        11400 non-null  object 
     2   year           11400 non-null  int64  
     3   POP            11398 non-null  float64
     4   XRAT           10163 non-null  float64
     5   Currency_Unit  10163 non-null  object 
     6   ppp            8745 non-null   float64
     7   tcgdp          8745 non-null   float64
     8   cgdp           8745 non-null   float64
     9   cgdp2          8745 non-null   float64
     10  cda2           8745 non-null   float64
     11  cc             8745 non-null   float64
     12  cg             8745 non-null   float64
     13  ci             8745 non-null   float64
     14  p              8745 non-null   float64
     15  p2             8745 non-null   float64
     16  pc             8745 non-null   float64
     17  pg             8745 non-null   float64
     18  pi             8745 non-null   float64
     19  openc          8745 non-null   float64
     20  cgnp           8305 non-null   float64
     21  y              8745 non-null   float64
     22  y2             8745 non-null   float64
     23  rgdpl          8725 non-null   float64
     24  rgdpl2         8725 non-null   float64
     25  rgdpch         8725 non-null   float64
     26  kc             8725 non-null   float64
     27  kg             8725 non-null   float64
     28  ki             8725 non-null   float64
     29  openk          8725 non-null   float64
     30  rgdpeqa        8555 non-null   float64
     31  rgdpwok        8177 non-null   float64
     32  rgdpl2wok      8177 non-null   float64
     33  rgdpl2pe       845 non-null    float64
     34  rgdpl2te       5399 non-null   float64
     35  rgdpl2th       2274 non-null   float64
     36  rgdptt         8745 non-null   float64
    dtypes: float64(33), int64(1), object(3)
    memory usage: 3.2+ MB


-  ``dtypes`` 查看各变量数据类型。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    df.dtypes




.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    country           object
    isocode           object
    year               int64
    POP              float64
    XRAT             float64
    Currency_Unit     object
    ppp              float64
    tcgdp            float64
    cgdp             float64
    cgdp2            float64
    cda2             float64
    cc               float64
    cg               float64
    ci               float64
    p                float64
    p2               float64
    pc               float64
    pg               float64
    pi               float64
    openc            float64
    cgnp             float64
    y                float64
    y2               float64
    rgdpl            float64
    rgdpl2           float64
    rgdpch           float64
    kc               float64
    kg               float64
    ki               float64
    openk            float64
    rgdpeqa          float64
    rgdpwok          float64
    rgdpl2wok        float64
    rgdpl2pe         float64
    rgdpl2te         float64
    rgdpl2th         float64
    rgdptt           float64
    dtype: object



-  ``.columns`` 查看数据框列名（变量名）。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    df.columns




.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    Index(['country', 'isocode', 'year', 'POP', 'XRAT', 'Currency_Unit', 'ppp',
           'tcgdp', 'cgdp', 'cgdp2', 'cda2', 'cc', 'cg', 'ci', 'p', 'p2', 'pc',
           'pg', 'pi', 'openc', 'cgnp', 'y', 'y2', 'rgdpl', 'rgdpl2', 'rgdpch',
           'kc', 'kg', 'ki', 'openk', 'rgdpeqa', 'rgdpwok', 'rgdpl2wok',
           'rgdpl2pe', 'rgdpl2te', 'rgdpl2th', 'rgdptt'],
          dtype='object')



-  ``.index`` 查看数据框行名。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    df.index




.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    RangeIndex(start=0, stop=11400, step=1)



-  ``.shape`` 可以查看 ``DataFrame`` 的维度，返回一个
   tuple（元组对象），显示数据框的行数和列数。因此，可以用索引分别查看数据框的行数和列数。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    #查看数据框行数
    print(df.shape[0])
    
    #查看数据框列数
    print(df.shape[1])


.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    11400
    37

