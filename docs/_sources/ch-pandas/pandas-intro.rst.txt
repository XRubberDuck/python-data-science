
pandas 入门
===========

pandas 库是一个流行的 Python
数据处理和分析库，它提供了用于处理和操作数据的强大工具和数据结构。Pandas
的核心数据结构包括 Series（序列）和
DataFrame（数据框），它们使数据的读取、清理、转换和分析变得更加容易。

导入 Pandas
~~~~~~~~~~~

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    !pip install pandas -i https://pypi.tuna.tsinghua.edu.cn/simple


.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple
    Requirement already satisfied: pandas in /Users/luweizheng/anaconda3/envs/tpch/lib/python3.10/site-packages (1.4.2)
    Requirement already satisfied: numpy>=1.21.0 in /Users/luweizheng/anaconda3/envs/tpch/lib/python3.10/site-packages (from pandas) (1.21.6)
    Requirement already satisfied: pytz>=2020.1 in /Users/luweizheng/anaconda3/envs/tpch/lib/python3.10/site-packages (from pandas) (2022.7.1)
    Requirement already satisfied: python-dateutil>=2.8.1 in /Users/luweizheng/anaconda3/envs/tpch/lib/python3.10/site-packages (from pandas) (2.8.2)
    Requirement already satisfied: six>=1.5 in /Users/luweizheng/anaconda3/envs/tpch/lib/python3.10/site-packages (from python-dateutil>=2.8.1->pandas) (1.16.0)


导入 pandas：

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    import pandas as pd

Series
~~~~~~

在 pandas 中，\ ``Series`` 是一种一维的带标签的数组状数据结构。

我们首先以 4 个数创建一个 ``Series``\ ，并命名为 ``my series``\ 。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    s = pd.Series([1, 2, 3, 4], name = 'my series')

``Series`` 是一个数组状数据结构，数组最重要的结构是索引（index）。index
主要用于标记第几个位置存储什么数据。\ ``pd.Series()`` 中不指定
index参数时，默认从0开始，逐一自增，形如： 0，1，…

-  Series 支持计算操作。

   .. code:: python

      s * 100

-  Series 支持描述性统计。

   .. code:: python

      s.describe()

-  Series 的索引很灵活。

   .. code:: python

      s.index = ['number1','number2','number3','number4']

   这时，\ ``Series`` 就像一个 Python 中的字典 ``dict``\ ，可以使用像
   ``dict`` 一样的语法来访问 ``Series`` 中的元素，其中 ``index`` 相当于
   ``dict`` 的键 ``key``\ 。例如，使用 ``[]`` 操作符访问 ``number1``
   对应的值。

   .. code:: python

      s['number1']

   又例如，使用 ``in`` 表达式判断某个索引是否在 Series 中。

   .. code:: python

      'number1' in s

DataFrame
~~~~~~~~~

``DataFrame`` 可以简单理解为一个 Excel 表，有很多列和很多行。
``DataFrame`` 的列（column）表示一个字段；\ ``DataFrame``
的行（row）表示一条数据。\ ``DataFrame`` 常被用来分析像 Excel
这样的、有行和列的表格类数据。Excel 也正在兼容
``DataFrame``\ ，使得用户在 Excel 中进行 pandas 数据处理与分析。

创建 DataFrame
^^^^^^^^^^^^^^

``DataFrame`` 可以来自列表、字典、文件等。

-  基于列表创建

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    names = ['Alice', 'Bob', 'Charlie']
    ages = [25, 30, 22]
    cities = ['New York', 'San Francisco', 'Los Angeles']
    data = {'Name': names, 'Age': ages, 'City': cities}
    df = pd.DataFrame(data)

-  基于字典创建

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    data = {'Column1': [1, 2], 'Column2': [3, 4]}
    df = pd.DataFrame(data)

-  基于文件创建

对于不同类型的文件，使用不同的函数，比如 ``read_csv`` 读取 csv
类型的数据。\ ``df = pd.read_csv('csv 文件的绝对路径')`` 用来读取一个
csv 文件，\ ``df =  pd.read_excel('excel 文件的绝对路径')`` 用来读取一个
excel 文件

   注：pd.read_csv 默认分隔符为逗号，pd.read_table
   默认分隔符为换行符。它们还支持许多其他参数，可以使用 ``help()``
   函数查看。 例：help(pd.read_csv)

案例：PWT
~~~~~~~~~

`PWT <https://www.rug.nl/ggdc/productivity/pwt/>`__
是一个经济学数据库，用于比较国家和地区之间的宏观经济数据，该数据集包含了各种宏观经济指标，如国内生产总值（GDP）、人均收入、劳动力和资本等因素，以及价格水平、汇率等信息。我们先下载，并使用
pandas 简单探索该数据集。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    import os
    import urllib.request
    import zipfile
    
    folder_path = os.path.join(os.getcwd(), "./data/pwt")
    download_url = "https://www.rug.nl/ggdc/docs/pwt70_06032011version.zip"
    file_name = download_url.split("/")[-1]
    if not os.path.exists(folder_path):
        # 创建文件夹
        os.makedirs(folder_path)
        print(f"文件夹不存在，已创建。")
    
        zip_file_path = os.path.join(folder_path, file_name)
    
        urllib.request.urlretrieve(download_url, zip_file_path)
        with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
            zip_ref.extractall(folder_path)
        print("数据已下载并解压缩。")
    else:
        print(f"文件夹已存在，无需操作。")


.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    文件夹已存在，无需操作。


查看数据
^^^^^^^^

使用 ``read_csv()`` 读取数据。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    df = pd.read_csv(os.path.join(folder_path, "pwt70_w_country_names.csv"))

``head()`` 函数可以指定查看前 n 行。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    n = 5
    df.head(n)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>country</th>
          <th>isocode</th>
          <th>year</th>
          <th>POP</th>
          <th>XRAT</th>
          <th>Currency_Unit</th>
          <th>ppp</th>
          <th>tcgdp</th>
          <th>cgdp</th>
          <th>cgdp2</th>
          <th>...</th>
          <th>kg</th>
          <th>ki</th>
          <th>openk</th>
          <th>rgdpeqa</th>
          <th>rgdpwok</th>
          <th>rgdpl2wok</th>
          <th>rgdpl2pe</th>
          <th>rgdpl2te</th>
          <th>rgdpl2th</th>
          <th>rgdptt</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>Afghanistan</td>
          <td>AFG</td>
          <td>1950</td>
          <td>8150.368</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>...</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>1</th>
          <td>Afghanistan</td>
          <td>AFG</td>
          <td>1951</td>
          <td>8284.473</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>...</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>2</th>
          <td>Afghanistan</td>
          <td>AFG</td>
          <td>1952</td>
          <td>8425.333</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>...</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>3</th>
          <td>Afghanistan</td>
          <td>AFG</td>
          <td>1953</td>
          <td>8573.217</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>...</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>4</th>
          <td>Afghanistan</td>
          <td>AFG</td>
          <td>1954</td>
          <td>8728.408</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>...</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
      </tbody>
    </table>
    <p>5 rows × 37 columns</p>
    </div>



``tail()`` 函数指定查看后 n 行。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    df.tail(n)




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>country</th>
          <th>isocode</th>
          <th>year</th>
          <th>POP</th>
          <th>XRAT</th>
          <th>Currency_Unit</th>
          <th>ppp</th>
          <th>tcgdp</th>
          <th>cgdp</th>
          <th>cgdp2</th>
          <th>...</th>
          <th>kg</th>
          <th>ki</th>
          <th>openk</th>
          <th>rgdpeqa</th>
          <th>rgdpwok</th>
          <th>rgdpl2wok</th>
          <th>rgdpl2pe</th>
          <th>rgdpl2te</th>
          <th>rgdpl2th</th>
          <th>rgdptt</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>11395</th>
          <td>Zimbabwe</td>
          <td>ZWE</td>
          <td>2005</td>
          <td>11639.470</td>
          <td>2.236364e+01</td>
          <td>Zimbabwe Dollar</td>
          <td>39.482829</td>
          <td>1968.205961</td>
          <td>169.097559</td>
          <td>184.183929</td>
          <td>...</td>
          <td>6.995770</td>
          <td>9.376272</td>
          <td>89.399427</td>
          <td>214.739197</td>
          <td>418.970867</td>
          <td>418.970867</td>
          <td>NaN</td>
          <td>390.907086</td>
          <td>NaN</td>
          <td>169.097559</td>
        </tr>
        <tr>
          <th>11396</th>
          <td>Zimbabwe</td>
          <td>ZWE</td>
          <td>2006</td>
          <td>11544.326</td>
          <td>1.643606e+02</td>
          <td>Zimbabwe Dollar</td>
          <td>384.899651</td>
          <td>2132.305773</td>
          <td>184.705956</td>
          <td>192.953943</td>
          <td>...</td>
          <td>7.648020</td>
          <td>14.986823</td>
          <td>81.697014</td>
          <td>217.543648</td>
          <td>424.754259</td>
          <td>407.262097</td>
          <td>NaN</td>
          <td>377.352394</td>
          <td>NaN</td>
          <td>179.368685</td>
        </tr>
        <tr>
          <th>11397</th>
          <td>Zimbabwe</td>
          <td>ZWE</td>
          <td>2007</td>
          <td>11443.187</td>
          <td>9.675781e+03</td>
          <td>Zimbabwe Dollar</td>
          <td>38583.323960</td>
          <td>2107.937100</td>
          <td>184.208918</td>
          <td>198.215361</td>
          <td>...</td>
          <td>8.387106</td>
          <td>15.787322</td>
          <td>84.483374</td>
          <td>202.707080</td>
          <td>396.486201</td>
          <td>376.163064</td>
          <td>NaN</td>
          <td>345.764991</td>
          <td>NaN</td>
          <td>173.113448</td>
        </tr>
        <tr>
          <th>11398</th>
          <td>Zimbabwe</td>
          <td>ZWE</td>
          <td>2008</td>
          <td>11350.000</td>
          <td>6.715424e+09</td>
          <td>Zimbabwe Dollar</td>
          <td>38723.957740</td>
          <td>1772.209867</td>
          <td>156.141839</td>
          <td>162.112294</td>
          <td>...</td>
          <td>7.685312</td>
          <td>13.444449</td>
          <td>85.117130</td>
          <td>174.178806</td>
          <td>343.159758</td>
          <td>332.649861</td>
          <td>NaN</td>
          <td>302.945712</td>
          <td>NaN</td>
          <td>142.329054</td>
        </tr>
        <tr>
          <th>11399</th>
          <td>Zimbabwe</td>
          <td>ZWE</td>
          <td>2009</td>
          <td>11383.000</td>
          <td>1.400000e+17</td>
          <td>Zimbabwe Dollar</td>
          <td>40289.958990</td>
          <td>1906.049843</td>
          <td>167.447056</td>
          <td>174.419700</td>
          <td>...</td>
          <td>7.905525</td>
          <td>14.743667</td>
          <td>83.749534</td>
          <td>182.613004</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>314.171069</td>
          <td>NaN</td>
          <td>151.435285</td>
        </tr>
      </tbody>
    </table>
    <p>5 rows × 37 columns</p>
    </div>



``info()`` 函数可以查看数据基本信息，包括字段类型和非空值计数。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    df.info()


.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    <class 'pandas.core.frame.DataFrame'>
    RangeIndex: 11400 entries, 0 to 11399
    Data columns (total 37 columns):
     #   Column         Non-Null Count  Dtype  
    ---  ------         --------------  -----  
     0   country        11400 non-null  object 
     1   isocode        11400 non-null  object 
     2   year           11400 non-null  int64  
     3   POP            11398 non-null  float64
     4   XRAT           10163 non-null  float64
     5   Currency_Unit  10163 non-null  object 
     6   ppp            8745 non-null   float64
     7   tcgdp          8745 non-null   float64
     8   cgdp           8745 non-null   float64
     9   cgdp2          8745 non-null   float64
     10  cda2           8745 non-null   float64
     11  cc             8745 non-null   float64
     12  cg             8745 non-null   float64
     13  ci             8745 non-null   float64
     14  p              8745 non-null   float64
     15  p2             8745 non-null   float64
     16  pc             8745 non-null   float64
     17  pg             8745 non-null   float64
     18  pi             8745 non-null   float64
     19  openc          8745 non-null   float64
     20  cgnp           8305 non-null   float64
     21  y              8745 non-null   float64
     22  y2             8745 non-null   float64
     23  rgdpl          8725 non-null   float64
     24  rgdpl2         8725 non-null   float64
     25  rgdpch         8725 non-null   float64
     26  kc             8725 non-null   float64
     27  kg             8725 non-null   float64
     28  ki             8725 non-null   float64
     29  openk          8725 non-null   float64
     30  rgdpeqa        8555 non-null   float64
     31  rgdpwok        8177 non-null   float64
     32  rgdpl2wok      8177 non-null   float64
     33  rgdpl2pe       845 non-null    float64
     34  rgdpl2te       5399 non-null   float64
     35  rgdpl2th       2274 non-null   float64
     36  rgdptt         8745 non-null   float64
    dtypes: float64(33), int64(1), object(3)
    memory usage: 3.2+ MB


数据切片
^^^^^^^^

实际中，我们常常想要选取感兴趣的数据子集。

-  切片选择行

从第 2 行到第 5 行（不包括第 5 行）：

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    df[2:5]




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>country</th>
          <th>isocode</th>
          <th>year</th>
          <th>POP</th>
          <th>XRAT</th>
          <th>Currency_Unit</th>
          <th>ppp</th>
          <th>tcgdp</th>
          <th>cgdp</th>
          <th>cgdp2</th>
          <th>...</th>
          <th>kg</th>
          <th>ki</th>
          <th>openk</th>
          <th>rgdpeqa</th>
          <th>rgdpwok</th>
          <th>rgdpl2wok</th>
          <th>rgdpl2pe</th>
          <th>rgdpl2te</th>
          <th>rgdpl2th</th>
          <th>rgdptt</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>2</th>
          <td>Afghanistan</td>
          <td>AFG</td>
          <td>1952</td>
          <td>8425.333</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>...</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>3</th>
          <td>Afghanistan</td>
          <td>AFG</td>
          <td>1953</td>
          <td>8573.217</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>...</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>4</th>
          <td>Afghanistan</td>
          <td>AFG</td>
          <td>1954</td>
          <td>8728.408</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>...</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
      </tbody>
    </table>
    <p>3 rows × 37 columns</p>
    </div>



-  列名索引选择列

要选择列，我们可以传递一个列表，其中包含以字符串表示的所需列的名称。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    df[['country', 'tcgdp']]




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>country</th>
          <th>tcgdp</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>Afghanistan</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>1</th>
          <td>Afghanistan</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>2</th>
          <td>Afghanistan</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>3</th>
          <td>Afghanistan</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>4</th>
          <td>Afghanistan</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>11395</th>
          <td>Zimbabwe</td>
          <td>1968.205961</td>
        </tr>
        <tr>
          <th>11396</th>
          <td>Zimbabwe</td>
          <td>2132.305773</td>
        </tr>
        <tr>
          <th>11397</th>
          <td>Zimbabwe</td>
          <td>2107.937100</td>
        </tr>
        <tr>
          <th>11398</th>
          <td>Zimbabwe</td>
          <td>1772.209867</td>
        </tr>
        <tr>
          <th>11399</th>
          <td>Zimbabwe</td>
          <td>1906.049843</td>
        </tr>
      </tbody>
    </table>
    <p>11400 rows × 2 columns</p>
    </div>



如果只选取一列，df[‘country’] 等价于 ``df.country``\ 。

-  ``iloc`` 方法选择，形式应为 ``.iloc[rows, columns]``

.. raw:: latex

   \diilbookstyleinputcell

.. code:: python

    df.iloc[2:5, 0:4]




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>country</th>
          <th>isocode</th>
          <th>year</th>
          <th>POP</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>2</th>
          <td>Afghanistan</td>
          <td>AFG</td>
          <td>1952</td>
          <td>8425.333</td>
        </tr>
        <tr>
          <th>3</th>
          <td>Afghanistan</td>
          <td>AFG</td>
          <td>1953</td>
          <td>8573.217</td>
        </tr>
        <tr>
          <th>4</th>
          <td>Afghanistan</td>
          <td>AFG</td>
          <td>1954</td>
          <td>8728.408</td>
        </tr>
      </tbody>
    </table>
    </div>


