
.. _dataframe-groupby:

分组汇总
========


实际的数据分析中，经常需要对某一类数据进行统计分析。比如，假如我们拥有全国所有人的身高和体重数据，我们想按照省份分组，统计每个省的平均身高和平均体重，这时候就需要使用分组操作。pandas
提供了 ``groupby`` 函数进行类似的分组汇总操作。:numref:\ ``groupby-img``
计算平均身高的分组汇总流程，主要包括两部分：分组与汇总。其中分组阶段将同一类的内容归结到相同的组中；汇总阶段将所关心的数据进行计算，比如求和、求平均等。

按哪些字段进行分组，这些字段又被成为
**分组变量**\ 。对其他字段进行汇总，其他汇总字段被成为
**汇总变量**\ 。对汇总变量进行计算，被称为 **汇总统计量**\ 。

.. _groupby-img:

.. figure:: ../img/ch-pandas/groupby.svg
   :width: 800px

   分组与汇总




分组变量
~~~~~~~~

在进行分组汇总时，分组变量可以有一个或多个。

例如，按照 ``country`` 和 ``year`` 分组，并对 ``tcgdp``
汇总求平均值，此时在 ``groupby``
后接多个分组变量，以列表形式写出。或者是
``.groupby(by=['country','year'])``\ 。\ ``.groupby``
之后要接上所需要汇总的字段，这个例子是
``tcgdp``\ 。最后要接上所需要进行的汇总计算，比如
``.mean()``\ 。计算结果中产生了多个索引，本例中是 ``country`` 和
``year``\ ，指代相应组的情况。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: ipython3

    df.groupby(['country','year'])[['tcgdp']].mean()




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th></th>
          <th>tcgdp</th>
        </tr>
        <tr>
          <th>country</th>
          <th>year</th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th rowspan="5" valign="top">Afghanistan</th>
          <th>1950</th>
          <td>NaN</td>
        </tr>
        <tr>
          <th>1951</th>
          <td>NaN</td>
        </tr>
        <tr>
          <th>1952</th>
          <td>NaN</td>
        </tr>
        <tr>
          <th>1953</th>
          <td>NaN</td>
        </tr>
        <tr>
          <th>1954</th>
          <td>NaN</td>
        </tr>
        <tr>
          <th>...</th>
          <th>...</th>
          <td>...</td>
        </tr>
        <tr>
          <th rowspan="5" valign="top">Zimbabwe</th>
          <th>2005</th>
          <td>1968.205961</td>
        </tr>
        <tr>
          <th>2006</th>
          <td>2132.305773</td>
        </tr>
        <tr>
          <th>2007</th>
          <td>2107.937100</td>
        </tr>
        <tr>
          <th>2008</th>
          <td>1772.209867</td>
        </tr>
        <tr>
          <th>2009</th>
          <td>1906.049843</td>
        </tr>
      </tbody>
    </table>
    <p>11400 rows × 1 columns</p>
    </div>



汇总变量
~~~~~~~~

在进行分组汇总时，汇总变量也可以有一个或多个。

例如按照 ``year`` 汇总 ``tcgdp`` 和 ``POP``\ ，在 ``.groupby``
后直接使用 ``[]`` 筛选相应列，再接汇总统计量。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: ipython3

    df.groupby(['year'])['tcgdp','POP'].mean()


.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    /var/folders/4n/v40br47s46ggrjm9bdm64lwh0000gn/T/ipykernel_99018/459214562.py:1: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.
      df.groupby(['year'])['tcgdp','POP'].mean()




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>tcgdp</th>
          <th>POP</th>
        </tr>
        <tr>
          <th>year</th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1950</th>
          <td>13660.635432</td>
          <td>16325.314772</td>
        </tr>
        <tr>
          <th>1951</th>
          <td>14146.954624</td>
          <td>16548.830286</td>
        </tr>
        <tr>
          <th>1952</th>
          <td>15534.601854</td>
          <td>16730.487389</td>
        </tr>
        <tr>
          <th>1953</th>
          <td>16030.140136</td>
          <td>17019.548668</td>
        </tr>
        <tr>
          <th>1954</th>
          <td>15906.385842</td>
          <td>17326.304137</td>
        </tr>
        <tr>
          <th>1955</th>
          <td>16351.783896</td>
          <td>17657.801874</td>
        </tr>
        <tr>
          <th>1956</th>
          <td>17522.921135</td>
          <td>17999.434226</td>
        </tr>
        <tr>
          <th>1957</th>
          <td>18746.775199</td>
          <td>18364.700442</td>
        </tr>
        <tr>
          <th>1958</th>
          <td>19866.755209</td>
          <td>18730.439042</td>
        </tr>
        <tr>
          <th>1959</th>
          <td>20371.277226</td>
          <td>19043.260395</td>
        </tr>
        <tr>
          <th>1960</th>
          <td>14977.099085</td>
          <td>19242.437274</td>
        </tr>
        <tr>
          <th>1961</th>
          <td>15214.093132</td>
          <td>19423.141142</td>
        </tr>
        <tr>
          <th>1962</th>
          <td>16145.511804</td>
          <td>19760.533626</td>
        </tr>
        <tr>
          <th>1963</th>
          <td>17253.196292</td>
          <td>20233.695226</td>
        </tr>
        <tr>
          <th>1964</th>
          <td>18782.800101</td>
          <td>20719.860558</td>
        </tr>
        <tr>
          <th>1965</th>
          <td>20176.152121</td>
          <td>21182.282832</td>
        </tr>
        <tr>
          <th>1966</th>
          <td>21961.204688</td>
          <td>21655.463121</td>
        </tr>
        <tr>
          <th>1967</th>
          <td>23418.473725</td>
          <td>22121.536947</td>
        </tr>
        <tr>
          <th>1968</th>
          <td>25702.641234</td>
          <td>22606.150837</td>
        </tr>
        <tr>
          <th>1969</th>
          <td>28697.931646</td>
          <td>23113.133937</td>
        </tr>
        <tr>
          <th>1970</th>
          <td>25592.960652</td>
          <td>23618.829389</td>
        </tr>
        <tr>
          <th>1971</th>
          <td>28178.816652</td>
          <td>24137.869711</td>
        </tr>
        <tr>
          <th>1972</th>
          <td>31065.456132</td>
          <td>24644.483005</td>
        </tr>
        <tr>
          <th>1973</th>
          <td>35065.397810</td>
          <td>25140.115900</td>
        </tr>
        <tr>
          <th>1974</th>
          <td>39204.549554</td>
          <td>25623.884663</td>
        </tr>
        <tr>
          <th>1975</th>
          <td>43423.381841</td>
          <td>26088.471411</td>
        </tr>
        <tr>
          <th>1976</th>
          <td>48300.823210</td>
          <td>26535.470116</td>
        </tr>
        <tr>
          <th>1977</th>
          <td>53742.382390</td>
          <td>26979.055474</td>
        </tr>
        <tr>
          <th>1978</th>
          <td>60599.360302</td>
          <td>27418.046916</td>
        </tr>
        <tr>
          <th>1979</th>
          <td>68524.511284</td>
          <td>27873.890479</td>
        </tr>
        <tr>
          <th>1980</th>
          <td>76299.636694</td>
          <td>28329.849105</td>
        </tr>
        <tr>
          <th>1981</th>
          <td>84839.459476</td>
          <td>28790.876000</td>
        </tr>
        <tr>
          <th>1982</th>
          <td>90562.026563</td>
          <td>29287.531784</td>
        </tr>
        <tr>
          <th>1983</th>
          <td>96863.034920</td>
          <td>29795.689879</td>
        </tr>
        <tr>
          <th>1984</th>
          <td>105519.346396</td>
          <td>30288.007526</td>
        </tr>
        <tr>
          <th>1985</th>
          <td>112897.453765</td>
          <td>30791.765868</td>
        </tr>
        <tr>
          <th>1986</th>
          <td>117703.162810</td>
          <td>31313.561847</td>
        </tr>
        <tr>
          <th>1987</th>
          <td>126084.211323</td>
          <td>31863.784021</td>
        </tr>
        <tr>
          <th>1988</th>
          <td>135934.150908</td>
          <td>32417.290021</td>
        </tr>
        <tr>
          <th>1989</th>
          <td>144470.482552</td>
          <td>32964.028537</td>
        </tr>
        <tr>
          <th>1990</th>
          <td>156581.796076</td>
          <td>33516.168453</td>
        </tr>
        <tr>
          <th>1991</th>
          <td>164913.740161</td>
          <td>34055.531837</td>
        </tr>
        <tr>
          <th>1992</th>
          <td>171001.831153</td>
          <td>34567.649100</td>
        </tr>
        <tr>
          <th>1993</th>
          <td>171397.253122</td>
          <td>35065.424347</td>
        </tr>
        <tr>
          <th>1994</th>
          <td>180851.311282</td>
          <td>35548.469784</td>
        </tr>
        <tr>
          <th>1995</th>
          <td>192149.203498</td>
          <td>36030.590795</td>
        </tr>
        <tr>
          <th>1996</th>
          <td>202261.838096</td>
          <td>36513.694642</td>
        </tr>
        <tr>
          <th>1997</th>
          <td>213191.005692</td>
          <td>36991.605037</td>
        </tr>
        <tr>
          <th>1998</th>
          <td>218784.947972</td>
          <td>37462.231458</td>
        </tr>
        <tr>
          <th>1999</th>
          <td>230541.593911</td>
          <td>37920.696968</td>
        </tr>
        <tr>
          <th>2000</th>
          <td>245498.700206</td>
          <td>38307.409353</td>
        </tr>
        <tr>
          <th>2001</th>
          <td>256663.346782</td>
          <td>38742.535742</td>
        </tr>
        <tr>
          <th>2002</th>
          <td>271088.189229</td>
          <td>39176.028268</td>
        </tr>
        <tr>
          <th>2003</th>
          <td>288478.010201</td>
          <td>39606.837547</td>
        </tr>
        <tr>
          <th>2004</th>
          <td>313838.113897</td>
          <td>40040.118863</td>
        </tr>
        <tr>
          <th>2005</th>
          <td>344724.420195</td>
          <td>40475.047642</td>
        </tr>
        <tr>
          <th>2006</th>
          <td>379205.674317</td>
          <td>40909.750389</td>
        </tr>
        <tr>
          <th>2007</th>
          <td>416504.775669</td>
          <td>41347.240695</td>
        </tr>
        <tr>
          <th>2008</th>
          <td>446441.988262</td>
          <td>41731.031032</td>
        </tr>
        <tr>
          <th>2009</th>
          <td>448186.871127</td>
          <td>42174.566563</td>
        </tr>
      </tbody>
    </table>
    </div>



汇总统计量
~~~~~~~~~~

``groupby`` 后可接的汇总统计量有：

-  mean - 均值

-  max - 最大值

-  min - 最小值

-  median - 中位数

-  std - 标准差

-  mad - 平均绝对偏差

-  count - 计数

-  skew - 偏度

-  quantile - 指定分位数

这些统计量可以直接接 groupby 对象使用，此外，\ ``agg``
方法提供了一次汇总多个统计量的方法。

例如，汇总各个国家 ``country`` 人口 ``POP`` 的均值、最大值、最小值。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: ipython3

    df.groupby(['country'])['POP'].agg(['mean','min','max'])




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>mean</th>
          <th>min</th>
          <th>max</th>
        </tr>
        <tr>
          <th>country</th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>Afghanistan</th>
          <td>15707.344917</td>
          <td>8150.368</td>
          <td>31889.923</td>
        </tr>
        <tr>
          <th>Albania</th>
          <td>2461.208000</td>
          <td>1227.156</td>
          <td>3250.778</td>
        </tr>
        <tr>
          <th>Algeria</th>
          <td>19896.967967</td>
          <td>8892.718</td>
          <td>34178.000</td>
        </tr>
        <tr>
          <th>Angola</th>
          <td>7295.199200</td>
          <td>4117.617</td>
          <td>12799.000</td>
        </tr>
        <tr>
          <th>Antigua and Barbuda</th>
          <td>65.352367</td>
          <td>45.816</td>
          <td>85.700</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>Venezuela</th>
          <td>15180.664233</td>
          <td>5009.006</td>
          <td>27191.090</td>
        </tr>
        <tr>
          <th>Vietnam</th>
          <td>54711.902183</td>
          <td>25348.144</td>
          <td>88577.000</td>
        </tr>
        <tr>
          <th>Yemen</th>
          <td>10789.802917</td>
          <td>4777.089</td>
          <td>22858.000</td>
        </tr>
        <tr>
          <th>Zambia</th>
          <td>6448.586433</td>
          <td>2553.000</td>
          <td>13061.000</td>
        </tr>
        <tr>
          <th>Zimbabwe</th>
          <td>7567.034333</td>
          <td>2853.151</td>
          <td>11867.855</td>
        </tr>
      </tbody>
    </table>
    <p>190 rows × 3 columns</p>
    </div>



多重索引
~~~~~~~~

在进行分组汇总操作时，产生的结果并不是常见的二维表数据框，而是具有多重索引的数据框。
pandas 开发者设计这种类型的数据框是借鉴了 Excel 数据透视表的功能。

例如，按照 ``country`` 和 ``year`` 顺序对 ``tcgdp`` 和 ``POP``
进行分组汇总，汇总统计量为最小值和最大值。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: ipython3

    df.groupby(['country','year'])['tcgdp','POP'].agg(['min','max'])


.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    /var/folders/4n/v40br47s46ggrjm9bdm64lwh0000gn/T/ipykernel_99018/1148587731.py:1: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.
      df.groupby(['country','year'])['tcgdp','POP'].agg(['min','max'])




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead tr th {
            text-align: left;
        }
    
        .dataframe thead tr:last-of-type th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr>
          <th></th>
          <th></th>
          <th colspan="2" halign="left">tcgdp</th>
          <th colspan="2" halign="left">POP</th>
        </tr>
        <tr>
          <th></th>
          <th></th>
          <th>min</th>
          <th>max</th>
          <th>min</th>
          <th>max</th>
        </tr>
        <tr>
          <th>country</th>
          <th>year</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th rowspan="5" valign="top">Afghanistan</th>
          <th>1950</th>
          <td>NaN</td>
          <td>NaN</td>
          <td>8150.368</td>
          <td>8150.368</td>
        </tr>
        <tr>
          <th>1951</th>
          <td>NaN</td>
          <td>NaN</td>
          <td>8284.473</td>
          <td>8284.473</td>
        </tr>
        <tr>
          <th>1952</th>
          <td>NaN</td>
          <td>NaN</td>
          <td>8425.333</td>
          <td>8425.333</td>
        </tr>
        <tr>
          <th>1953</th>
          <td>NaN</td>
          <td>NaN</td>
          <td>8573.217</td>
          <td>8573.217</td>
        </tr>
        <tr>
          <th>1954</th>
          <td>NaN</td>
          <td>NaN</td>
          <td>8728.408</td>
          <td>8728.408</td>
        </tr>
        <tr>
          <th>...</th>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th rowspan="5" valign="top">Zimbabwe</th>
          <th>2005</th>
          <td>1968.205961</td>
          <td>1968.205961</td>
          <td>11639.470</td>
          <td>11639.470</td>
        </tr>
        <tr>
          <th>2006</th>
          <td>2132.305773</td>
          <td>2132.305773</td>
          <td>11544.326</td>
          <td>11544.326</td>
        </tr>
        <tr>
          <th>2007</th>
          <td>2107.937100</td>
          <td>2107.937100</td>
          <td>11443.187</td>
          <td>11443.187</td>
        </tr>
        <tr>
          <th>2008</th>
          <td>1772.209867</td>
          <td>1772.209867</td>
          <td>11350.000</td>
          <td>11350.000</td>
        </tr>
        <tr>
          <th>2009</th>
          <td>1906.049843</td>
          <td>1906.049843</td>
          <td>11383.000</td>
          <td>11383.000</td>
        </tr>
      </tbody>
    </table>
    <p>11400 rows × 4 columns</p>
    </div>



此时数据框中有两个行索引（\ ``country`` 和
``year``\ ）和两个列索引（\ ``tcgdp`` + ``POP`` 和 ``min`` +
``max``\ ）。需要筛选列时，第一个 ``[]`` 筛选第一重列索引（从 ``tcgdp``
和 ``POP`` 中选择一个列），第二个 ``[]`` 筛选第二重列索引（从 ``min`` 和
``max`` 中选择一个列）。

例如，查询各个国家 ``country`` 各年 ``year`` 人口 ``POP`` 的最小值。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: ipython3

    df_query = df.groupby(['country','year'])['tcgdp','POP'].agg(['min','max'])
    df_query['POP']['min']


.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    /var/folders/4n/v40br47s46ggrjm9bdm64lwh0000gn/T/ipykernel_99018/1120076566.py:1: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.
      df_query = df.groupby(['country','year'])['tcgdp','POP'].agg(['min','max'])




.. raw:: latex

   \diilbookstyleoutputcell

.. parsed-literal::
    :class: output

    country      year
    Afghanistan  1950     8150.368
                 1951     8284.473
                 1952     8425.333
                 1953     8573.217
                 1954     8728.408
                           ...    
    Zimbabwe     2005    11639.470
                 2006    11544.326
                 2007    11443.187
                 2008    11350.000
                 2009    11383.000
    Name: min, Length: 11400, dtype: float64


